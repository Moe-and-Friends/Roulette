
[default]
bot_token = "<bot_token>"
bot_shard_id = 0
bot_shard_count = 1

[default.guilds."<guild_id_here>"]

# Channels that should be observed.
channels = ["<list_of_channel_ids_as_int>"]

# Roles that should not be subject to a mute event.
safe_roles = ["<list_of_role_ids_as_int>"]

# Roles that are conferred administrator-like abilities.
# This grants the ability for users with this role to role for other users.
# Note that admin roles are implicitly also safe roles.
admin_roles = ["<list_of_role_ids_as_int>"]

# Words, that if detected within a message, will trigger the Roulette
triggers = ["<list_of_words>"] # Words will be searched for in the message content.

# Supported Tags:
# {muted_user_name}
# {mute_duration_display_str}
# These messages are randomly selected by the bot to respond to if the user is rolling for themselves.
mute_messages_self = ["<list_of_messages>"]

# Supported Tags:
# {muted_user_name}
# {mute_duration_display_str}
# These messages are randomly selected by the bot to respond if the user is rolling for others.
mute_messages_other = ["<list_of_message>"]

# Supported Tags:
# {safe_user_name}
# {mute_duration_display_str}
# These messages are randomly selected by the bot to respond if the user is rolling for themselves.
safe_messages_self = ["<list_of_messages>"]

# Supported Tags:
# {safe_user_name}
# {mute_duration_display_str}
# These messages are randomly selected by the bot to respond if the user is rolling for others.
safe_messages_other = ["<list_of_messages>"]

# Supported Tags:
# {author_name}
# These messages are used by the bot to warn non-admin users who attempt to run a command that requires admin roles.
admin_no_role_messages = ["<list_of_messages>"]

# Intervals can be set using a variety of different modules. The first available one, in the order below, will be used:
# 1. DigitalOcean Function
# 2. Local Settings

# DigitalOcean Function Settings
# Make a request to a DigitalOcean Function (or same interface) and read the data back.
[default.intervals.digitalocean.function]
# Enables/disables this interval module. Must be explicitly set to `true` for this module to be used.
enabled = false
# The URL the function is hosted at. Include the full URL.
# The request will be made argumentless and bodyless.
# Expected request return format example:
# {
#     "action": {
#         "timeout": {
#             "duration_display_str": "43 minutes" # str
#             "duration_mins": 43 # uint, > 0
#             "lower_bound_display_str": "1m" # str
#             "lower_bound_mins": 1 # uint, > 0
#             "upper_bound_display_str": "1h" # str
#             "upper_bound_mins": 60 # uint, > 0
#         }
#         "type": "TIMEOUT" # Possible values: ["TIMEOUT"]
#     }
# }
# Required.
url = "https://faas-<region>-<id>.doserverless.co/api/v1/web/fn-<fn_id>/your/function/path"
# For Secure Web Functions.
# Optional.
auth_token = "<whisk_auth_token>"
# Timeout before failing the request and moving to the next available module.
# Must be set to a value greater than 0.
# Optional.
timeout = 1

# Local Settings
# List of Mute intervals
# Bounds are inclusive (bound.lower, bound.upper)
# Weight: Non-cumulative weight for each interval.
# Supported suffixes: m, h, d, w
# Repeat another [[<STAGE>.intervals]] to add a new interval.
[[default.intervals.local]]
bound = { "lower" = "1m", "upper" = "5m"}
weight = 100
